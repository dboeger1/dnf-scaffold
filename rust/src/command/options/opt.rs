use crate::{
    command::options::{
        advisory,
        allowerasing,
        assumeno,
        assumeyes,
        best,
        bugfix,
        bz,
        cacheonly,
        color,
        comment,
        config,
        cve,
        debuglevel,
        debugsolver,
        disable,
        disableexcludes,
        disableplugin,
        disablerepo,
        downloaddir,
        downloadonly,
        enable,
        enableplugin,
        enablerepo,
        enhancement,
        errorlevel,
        exclude,
        excludepkgs,
        forcearch,
        help,
        installroot,
        ipv4,
        ipv6,
        newpackage,
        noautoremove,
        nobest,
        nodocs,
        nogpgcheck,
        noplugins,
        obsoletes,
        quiet,
        randomwait,
        refresh,
        releasever,
        repo,
        repofrompath,
        rpmverbosity,
        secseverity,
        security,
        setopt,
        showduplicates,
        skipbroken,
        verbose,
        version,
    },
    types::{
        color::Color,
        debug_level::DebugLevel,
        error_level::ErrorLevel,
        exclude::Exclude,
    },
};
use lazy_static::lazy_static;
use std::{fmt::Display, path::PathBuf};


pub enum Opt {
    Advisory(String),
    Allowerasing,
    Assumeno,
    Assumeyes,
    Best,
    Bugfix,
    Bz(String),
    Cacheonly,
    Color(Color),
    Comment(String),
    Config(PathBuf),
    Cve(String),
    Debuglevel(DebugLevel),
    Debugsolver,
    Disable,
    Disableexcludes(Exclude),
    Disableplugin(String),
    Disablerepo(String),
    Downloaddir(PathBuf),
    Downloadonly,
    Enable,
    Enableplugin(String),
    Enablerepo(String),
    Enhancement,
    Errorlevel(ErrorLevel),
    Exclude(String),
    Excludepkgs(String),
    Forcearch(String),
    Help,
    Installroot(PathBuf),
    Ipv4,
    Ipv6,
    Newpackage,
    Noautoremove,
    Nobest,
    Nodocs,
    Nogpgcheck,
    Noplugins,
    Obsoletes,
    Quiet,
    Randomwait(u8),
    Refresh,
    Releasever(String),
    Repo(String),
    Repofrompath((String, PathBuf)),
    Rpmverbosity(String),
    Secseverity(String),
    Security,
    Setopt(String),
    Showduplicates,
    Skipbroken,
    Verbose,
    Version,
}

impl Opt {
    fn name(&self) -> &str {
        match self {
            Self::Advisory(_) => advisory::STR,
            Self::Allowerasing => allowerasing::STR,
            Self::Assumeno => assumeno::STR,
            Self::Assumeyes => assumeyes::STR,
            Self::Best => best::STR,
            Self::Bugfix => bugfix::STR,
            Self::Bz(_) => bz::STR,
            Self::Cacheonly => cacheonly::STR,
            Self::Color(_) => color::STR,
            Self::Comment(_) => comment::STR,
            Self::Config(_) => config::STR,
            Self::Cve(_) => cve::STR,
            Self::Debuglevel(_) => debuglevel::STR,
            Self::Debugsolver => debugsolver::STR,
            Self::Disable => disable::STR,
            Self::Disableexcludes(_) => disableexcludes::STR,
            Self::Disableplugin(_) => disableplugin::STR,
            Self::Disablerepo(_) => disablerepo::STR,
            Self::Downloaddir(_) => downloaddir::STR,
            Self::Downloadonly => downloadonly::STR,
            Self::Enable => enable::STR,
            Self::Enableplugin(_) => enableplugin::STR,
            Self::Enablerepo(_) => enablerepo::STR,
            Self::Enhancement => enhancement::STR,
            Self::Errorlevel(_) => errorlevel::STR,
            Self::Exclude(_) => exclude::STR,
            Self::Excludepkgs(_) => excludepkgs::STR,
            Self::Forcearch(_) => forcearch::STR,
            Self::Help => help::STR,
            Self::Installroot(_) => installroot::STR,
            Self::Ipv4 => ipv4::STR,
            Self::Ipv6 => ipv6::STR,
            Self::Newpackage => newpackage::STR,
            Self::Noautoremove => noautoremove::STR,
            Self::Nobest => nobest::STR,
            Self::Nodocs => nodocs::STR,
            Self::Nogpgcheck => nogpgcheck::STR,
            Self::Noplugins => noplugins::STR,
            Self::Obsoletes => obsoletes::STR,
            Self::Quiet => quiet::STR,
            Self::Randomwait(_) => randomwait::STR,
            Self::Refresh => refresh::STR,
            Self::Releasever(_) => releasever::STR,
            Self::Repo(_) => repo::STR,
            Self::Repofrompath(_) => repofrompath::STR,
            Self::Rpmverbosity(_) => rpmverbosity::STR,
            Self::Secseverity(_) => secseverity::STR,
            Self::Security => security::STR,
            Self::Setopt(_) => setopt::STR,
            Self::Showduplicates => showduplicates::STR,
            Self::Skipbroken => skipbroken::STR,
            Self::Verbose => verbose::STR,
            Self::Version => version::STR,
        }
    }

    fn arg(&self) -> Option<String> {
        match self {
            Self::Advisory(arg) => Some(arg.to_string()),
            Self::Color(arg) => Some(arg.to_string()),
            Self::Comment(arg) => Some(arg.to_string()),
            Self::Config(arg) => Some(arg.to_string_lossy().to_string()),
            Self::Cve(arg) => Some(arg.to_string()),
            Self::Debuglevel(arg) => Some(arg.to_string()),
            Self::Disableexcludes(arg) => Some(arg.to_string()),
            Self::Disableplugin(arg) => Some(arg.to_string()),
            Self::Disablerepo(arg) => Some(arg.to_string()),
            Self::Downloaddir(arg) => Some(arg.to_string_lossy().to_string()),
            Self::Enableplugin(arg) => Some(arg.to_string()),
            Self::Enablerepo(arg) => Some(arg.to_string()),
            Self::Errorlevel(arg) => Some(arg.to_string()),
            Self::Exclude(arg) => Some(arg.to_string()),
            Self::Excludepkgs(arg) => Some(arg.to_string()),
            Self::Forcearch(arg) => Some(arg.to_string()),
            Self::Installroot(arg) => Some(arg.to_string_lossy().to_string()),
            Self::Randomwait(arg) => Some(arg.to_string()),
            Self::Releasever(arg) => Some(arg.to_string()),
            Self::Repo(arg) => Some(arg.to_string()),
            //Self::Repofrompath((arg)) => Some(arg.to_string()),
            Self::Rpmverbosity(arg) => Some(arg.to_string()),
            Self::Secseverity(arg) => Some(arg.to_string()),
            Self::Setopt(arg) => Some(arg.to_string()),
            _ => None,
        }
    }
}

impl Display for Opt {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "--{}", self.name())?;
        if let Some(arg) = self.arg() {
            write!(f, " {arg}")?;
        }

        Ok(())
    }
}

lazy_static! {
    pub static ref OPTS: [Opt; 53] = [
        Opt::Advisory(String::default()),
        Opt::Allowerasing,
        Opt::Assumeno,
        Opt::Assumeyes,
        Opt::Best,
        Opt::Bugfix,
        Opt::Bz(String::default()),
        Opt::Cacheonly,
        Opt::Color(Color::default()),
        Opt::Comment(String::default()),
        Opt::Config(PathBuf::default()),
        Opt::Cve(String::default()),
        Opt::Debuglevel(DebugLevel::default()),
        Opt::Debugsolver,
        Opt::Disable,
        Opt::Disableexcludes(Exclude::default()),
        Opt::Disableplugin(String::default()),
        Opt::Disablerepo(String::default()),
        Opt::Downloaddir(PathBuf::default()),
        Opt::Downloadonly,
        Opt::Enable,
        Opt::Enableplugin(String::default()),
        Opt::Enablerepo(String::default()),
        Opt::Enhancement,
        Opt::Errorlevel(ErrorLevel::default()),
        Opt::Exclude(String::default()),
        Opt::Excludepkgs(String::default()),
        Opt::Forcearch(String::default()),
        Opt::Help,
        Opt::Installroot(PathBuf::default()),
        Opt::Ipv4,
        Opt::Ipv6,
        Opt::Newpackage,
        Opt::Noautoremove,
        Opt::Nobest,
        Opt::Nodocs,
        Opt::Nogpgcheck,
        Opt::Noplugins,
        Opt::Obsoletes,
        Opt::Quiet,
        Opt::Randomwait(u8::default()),
        Opt::Refresh,
        Opt::Releasever(String::default()),
        Opt::Repo(String::default()),
        Opt::Repofrompath((String::default(), PathBuf::default())),
        Opt::Rpmverbosity(String::default()),
        Opt::Secseverity(String::default()),
        Opt::Security,
        Opt::Setopt(String::default()),
        Opt::Showduplicates,
        Opt::Skipbroken,
        Opt::Verbose,
        Opt::Version,
    ];
}
